name: DupeLs CLI CI

on:
  push:
    tags: ["v*"] # Run workflows on version tags
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-nextest
        run: cargo install cargo-nextest

      - name: Build (debug)
        run: cargo build --verbose

      - name: Run tests
        run: cargo nextest run --all --no-fail-fast

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage report
        run: cargo tarpaulin --out Xml

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        with:
          path: cobertura.xml

  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "VERSION=$(cargo pkgid | cut -d# -f2)" >> $GITHUB_ENV

      - name: Set short OS name
        id: osname
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "OSNAME=ubuntu" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "OSNAME=windows" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            echo "OSNAME=macos" >> $GITHUB_ENV
          fi

      - name: Build (release)
        run: cargo build --release --verbose

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dupels-${{ env.OSNAME }}-${{ env.VERSION }}
          path: |
            target/release/dupels*
            target/release/dupels.exe

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, coverage]
    if: github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v') && github.event.base_ref == 'refs/heads/main'
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
